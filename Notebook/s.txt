import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Pressable,
  Image,
  TouchableOpacity,
  ScrollView,
} from "react-native";

import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { createStackNavigator, StackNavigationProp } from '@react-navigation/stack';
import { SafeAreaView } from "react-native-safe-area-context";
import * as ImagePicker from "expo-image-picker";
import { Picker } from "@react-native-picker/picker";
import {
  ALERT_TYPE,
  AlertNotificationRoot,
  Toast,
} from "react-native-alert-notification";

// Define navigation types
export type RootStackParamList = {
  Signup: undefined;
  Login: undefined;
};

const Stack = createStackNavigator<RootStackParamList>();
const PUBLIC_URL = "https://e20b5d8583b6.ngrok-free.app";

// Create a simple Login screen for navigation
function LoginScreen() {
  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login Screen</Text>
      <Text>This would be your login screen</Text>
      <TouchableOpacity 
        style={styles.backButton}
        onPress={() => navigation.navigate('Signup')}
      >
        <Text style={styles.backButtonText}>Back to Signup</Text>
      </TouchableOpacity>
    </View>
  );
}

// Your main Signup component
function SignupScreen() {
  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
  const [image, setImage] = useState<string | null>(null);
  const [getCity, setCity] = useState("");

  const [getCities, setCities] = React.useState<{ id: number; name: string }[]>(
    []
  );

  const [getFirstName, setFirstName] = useState("");
  const [getLastName, setLastName] = useState("");
  const [getEmail, setEmail] = useState("");
  const [getPassword, setpassword] = useState("");
  const [getConfirmPassword, setConfirmPassword] = useState("");

  useEffect(() => {
    const loadCities = async () => {
      try {
        const response = await fetch(PUBLIC_URL + "/NoteBook/Cities");

        if (response.ok) {
          const json = await response.json();
          setCities(json.cityList);
        } else {
          console.log("cities loading failed");
          Toast.show({
            type: ALERT_TYPE.WARNING,
            title: "Error",
            textBody: "Failed to load cities",
          });
        }
      } catch (error) {
        console.error("Error loading cities:", error);
        Toast.show({
          type: ALERT_TYPE.DANGER,
          title: "Error",
          textBody: "Network error loading cities",
        });
      }
    };
    loadCities();
  }, []);

  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Toast.show({
        type: ALERT_TYPE.WARNING,
        title: "Permission Required",
        textBody: "Sorry, we need camera roll permissions to select an image.",
      });
      return;
    }

    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSignup = async () => {
    if (
      getFirstName === "" ||
      getLastName === "" ||
      getEmail === "" ||
      getPassword === "" ||
      getConfirmPassword === "" ||
      getCity === "" ||
      getCity === "0" ||
      image === null
    ) {
      Toast.show({
        type: ALERT_TYPE.WARNING,
        title: "Warning",
        textBody: "Please fill all the fields",
      });
      return;
    }

    if (getPassword !== getConfirmPassword) {
      Toast.show({
        type: ALERT_TYPE.WARNING,
        title: "Warning",
        textBody: "Passwords do not match",
      });
      return;
    }

    try {
      let formData = new FormData();
      formData.append("firstName", getFirstName);
      formData.append("lastName", getLastName);
      formData.append("email", getEmail);
      formData.append("password", getPassword);
      formData.append("confirmPassword", getConfirmPassword);
      formData.append("city", getCity);
      
      if (image) {
        formData.append("image", {
          uri: image,
          name: "profile.jpg",
          type: "image/jpeg",
        } as any);
      }

      const response = await fetch(
        PUBLIC_URL + "/NoteBook/Signup",
        {
          method: "POST",
          headers: {
            "Content-Type": "multipart/form-data",
          },
          body: formData,
        }
      );

      if (response.ok) {
        Toast.show({
          type: ALERT_TYPE.SUCCESS,
          title: "Success",
          textBody: "Account created successfully",
        });
        navigation.navigate('Login');
      } else {
        const errorData = await response.json();
        Toast.show({
          type: ALERT_TYPE.DANGER,
          title: "Error",
          textBody: errorData.message || "Account creation failed",
        });
      }
    } catch (error) {
      console.error("Signup error:", error);
      Toast.show({
        type: ALERT_TYPE.DANGER,
        title: "Error",
        textBody: "Network error. Please try again.",
      });
    }
  };

  return (
    <AlertNotificationRoot>
      <SafeAreaView style={styles.safeArea}>
        <ScrollView>
          <View style={styles.signUpBody}>
            <Text style={styles.signUpTitle}>Signup</Text>
            <Pressable onPress={pickImage} style={styles.imageSelector}>
              {image ? (
                <Image style={styles.selectedImage} source={{ uri: image }} />
              ) : (
                <View style={styles.imagePlaceholder}>
                  <Text style={styles.imageText}>+</Text>
                  <Text style={styles.imageLabel}>Add Image</Text>
                </View>
              )}
            </Pressable>

            <TextInput
              style={styles.firstNameInput}
              placeholder="Type your first name"
              onChangeText={setFirstName}
              value={getFirstName}
            />
            <TextInput
              style={styles.lastNameInput}
              placeholder="Type your Last name"
              onChangeText={setLastName}
              value={getLastName}
            />
            <TextInput
              style={styles.emailInput}
              keyboardType="email-address"
              placeholder="Type your email"
              onChangeText={setEmail}
              value={getEmail}
              autoCapitalize="none"
            />
            <TextInput
              style={styles.passwordInput}
              secureTextEntry
              placeholder="Type your password"
              onChangeText={setpassword}
              value={getPassword}
            />
            <TextInput
              style={styles.passwordInput}
              secureTextEntry
              placeholder="Confirm your password"
              onChangeText={setConfirmPassword}
              value={getConfirmPassword}
            />
            <View style={styles.cityInput}>
              <Picker
                selectedValue={getCity}
                onValueChange={(itemValue) => setCity(itemValue)}
              >
                <Picker.Item label="Select a city" value="0" />
                {getCities.map((city) => (
                  <Picker.Item
                    key={city.id}
                    label={city.name}
                    value={city.id.toString()}
                  />
                ))}
              </Picker>
            </View>

            <Pressable style={styles.signUpButton} onPress={handleSignup}>
              <Text style={styles.signUpButtonText}>
                Signup
              </Text>
            </Pressable>

            <View style={styles.loginContainer}>
              <Text style={styles.accountText}>Already have an account?</Text>
              <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                <Text style={styles.loginLink}>Login</Text>
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </AlertNotificationRoot>
  );
}

// Main App component that wraps everything with NavigationContainer
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Signup">
        <Stack.Screen name="Signup" component={SignupScreen} options={{ title: 'Sign Up' }} />
        <Stack.Screen name="Login" component={LoginScreen} options={{ title: 'Login' }} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  backButton: {
    marginTop: 20,
    padding: 15,
    backgroundColor: '#007AFF',
    borderRadius: 8,
  },
  backButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  safeArea: {
    flex: 1,
  },
  signUpBody: {
    flex: 1,
    backgroundColor: "white",
    padding: 20,
  },
  signUpTitle: {
    fontSize: 40,
    fontWeight: "bold",
    textAlign: "center",
    marginTop: 30,
    marginBottom: 20,
  },
  firstNameInput: {
    height: 50,
    marginTop: 20,
    borderWidth: 1,
    padding: 10,
    width: "100%",
    alignSelf: "center",
    borderRadius: 10,
    borderColor: "#ccc",
  },
  emailInput: {
    height: 50,
    marginTop: 15,
    borderWidth: 1,
    padding: 10,
    width: "100%",
    alignSelf: "center",
    borderRadius: 10,
    borderColor: "#ccc",
  },
  lastNameInput: {
    height: 50,
    marginTop: 15,
    borderWidth: 1,
    padding: 10,
    width: "100%",
    alignSelf: "center",
    borderRadius: 10,
    borderColor: "#ccc",
  },
  cityInput: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    width: "100%",
    alignSelf: "center",
    marginTop: 15,
    overflow: "hidden",
    height: 55,
  },
  passwordInput: {
    height: 50,
    marginTop: 15,
    borderWidth: 1,
    padding: 10,
    width: "100%",
    alignSelf: "center",
    borderRadius: 10,
    borderColor: "#ccc",
  },
  signUpButton: {
    height: 50,
    marginTop: 30,
    padding: 10,
    width: "100%",
    alignSelf: "center",
    borderRadius: 10,
    backgroundColor: "green",
    justifyContent: "center",
    alignItems: "center",
  },
  signUpButtonText: {
    color: "white",
    textAlign: "center",
    fontSize: 18,
    fontWeight: "bold",
  },
  imageSelector: {
    width: 100,
    height: 100,
    alignSelf: "center",
    marginTop: 10,
    marginBottom: 20,
    borderRadius: 60,
    borderWidth: 1,
    borderColor: "#ccc",
    justifyContent: "center",
    alignItems: "center",
  },
  selectedImage: {
    width: "100%",
    height: "100%",
    borderRadius: 60,
  },
  imagePlaceholder: {
    alignItems: "center",
    justifyContent: "center",
  },
  imageText: {
    fontSize: 36,
    color: "#342f3d",
    marginBottom: 5,
  },
  imageLabel: {
    fontSize: 14,
    color: "#2b3ac0",
  },
  loginContainer: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    marginTop: 30,
    marginBottom: 30,
  },
  accountText: {
    fontSize: 16,
    color: "#333",
    marginRight: 5,
  },
  loginLink: {
    color: "blue",
    fontSize: 16,
    fontWeight: "bold",
  },
});